#lang racket
(require "sicp-lang.rkt")

(define (bit? x)
  (and (number? x)
       (or (= x 0)
           (= x 1))))

(define (make-wire)
  (let ([bit 0]
        [affects null]    ;affects should be a list of affected wires
        [depends null])   ;depends should be a logic cons a list of depended wires
    (define (write! b)
      (define (affect! wire)
        (wire (wire 'forced-bit)))
      (set! bit b)
      (for-each affect! affects))
    (define forced-bit
      (if (null? depends)
          'free
          (apply (car depends)
                 (map get-bit (cdr depends)))))
    (define (depend! wires logic)
      (if (null? depends)
          (set! depends (cons logic wires))
          (error "cannot change existing dependences: "
                 depends)))
    (define (add-affect! wire)
      (set! affects (cons wire affects)))
    (define (dispatch m)
      (cond [(bit? m) (write! m)]
            [(eq? m 'bit) bit]
            [(eq? m 'forced-bit) forced-bit]
            [(eq? m 'depend!) depend!]
            [(eq? m 'add-affect!) add-affect!]
            [(eq? m 'depends) depends]
            [(eq? m 'affects) affects]
            [else (error "unknown message: WIRE" m)]))
    dispatch))

(define (get-bit wire)
  (wire 'bit))

(define (relate! wires-in wire-out logic)
  (define (add-affect! wire-in)
    ((wire-in 'add-affect!) wire-out))
  (for-each add-affect! wires-in)
  ((wire-out 'depend!) (cons logic wires-in))
  'ok)

;; logic gates
(define (not-gate in out)
  (relate! (list in) out (lambda (bin) (- 1 bin))))

(define (and-gate a b out)
  (relate! (list a b) out
           (lambda (ba bb)
             (if (= (* ba bb) 1)
                 1 0))))

(define (or-gate a b out)
  (relate! (list a b) out
           (lambda (ba bb)
             (if (> (+ ba bb) 0)
                 1 0))))

;; test
(define a (make-wire))
(define b (make-wire))
(define c (make-wire))
(define d (make-wire))
(define e (make-wire))
(define f (make-wire))

(b 1)
(c 0)
(d 1)
(e 1)
(not-gate a b)
(and-gate c d e)
(or-gate c d f)
