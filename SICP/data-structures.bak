#lang racket
(require "sicp-lang.rkt")
(provide (all-defined-out))

;; vectors
(define (make-vect x y)
  (cons x y))
(define (vect-xcor v)
  (car v))
(define (vect-ycor v)
  (cdr v))

(define (vect-scale s v)
  (make-vect (* s (vect-xcor v))
               (* s (vect-ycor v))))
(define (vect-add v w)
  (make-vect (+ (vect-xcor v)
                  (vect-xcor w))
               (+ (vect-ycor v)
                  (vect-ycor w))))
(define (vect-sub v w)
  (vect-add v (vect-scale w -1)))

;; segments
(define (make-segment start end)
  (cons start end))
(define (segment-start seg)
  (car seg))
(define (segment-end seg)
  (cdr seg))

;; trees
(define (make-tree left entry right)
  (list left entry right))
(define (make-leaf entry)
  (make-tree nil entry nil))
(define (tree-left tree)
  (car tree))
(define (tree-entry tree)
  (cadr tree))
(define (tree-right tree)
  (caddr tree))

(define (empty? tree)
  (null? tree))
(define (leaf? tree)
  (and (not (empty? tree))
       (empty? (tree-left tree))
       (empty? (tree-right tree))))